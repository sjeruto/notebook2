Dstatistics.Rproj
library (tidyverse)
library (tidyverse)
library(readxl)
library(readxl)
installinsta
library(readxl)
library (tidyverse)
library (tidyverse)
library(readxl)
library(readxl)
gettingData <- read_excel("C:/Users/sharon/Desktop/gettingData.zip")
View(gettingData)
library(readxl)
library(readxl)
kuiper <- read_excel("C:/Users/sharon/Desktop/kuiper.xls")
View(kuiper)
ggplot(carPrice) + geom_point(aes(y=Price,x=Mileage))
ggplot(carPrice) + geom_point(aes(y=Price,x=Mileage))
ggplot(carPrice) + geom_point(aes(y=Price,x=Mileage))
names(carPrice)
library(readxl)
ggplot(carPrice) + geom_point(aes(y=Price,x=Mileage))
names(carPrice)
install.packages(c("ggplot2", "knitr", "sqldf", "stats", "tidyverse", "stringr"))
install.packages(c("ggplot2", "knitr", "sqldf", "stats", "tidyverse", "stringr"))
install.packages(c("ggplot2", "knitr", "sqldf", "stats", "tidyverse", "stringr"))
li
library(ggplot2)
library(stats)
install.packages("tidyverse")
install.packages("ggplot2")
#Load the packages
suppressWarnings(suppressMessages({
library(ggplot2)
library(knitr)
library(sqldf)
library(stats)
library(tidyverse)
}))
my_var <- 10
my_str <- "Name"
my_var
print(my_str)
print(total_class_size)
num_students <- 40
num_staff <- 2
total_class_size <- num_students+num_staff
print(total_class_size)
x <- c(1, 2, 3)
y <- c('Apple', 'Bag', 'Car')
z <- seq(from = 1, to = 10, by = 2)
x <- 1:3
y <- 10:12
cbind(x, y)
m <-  matrix(1:9, byrow=TRUE, nrow=3)
str(m)
m[1,2]
m[,2]
gender <- factor(c("Male","Female","X"))
ordered_speed <- factor(c("slow", "medium", "fast"),                   levels=c("slow", "medium", "fast"), ordered=TRUE)
str(ordered_speed)
str(ordered_speed)
str(mtcars$gear)
gear_fac = as.factor(mtcars$gear)
str(gear_fac)
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
planets_df <- data.frame(name, type, diameter, rotation,rings)
str(planets_df)
names(planets_df)
head(planets_df)
planets_df[1, ]
planets_df[1:3,2]
planets_df[1:3,"type"]
planets_df[,3]
planets_df[,"diameter"]
planets_df$diameter
w <- list(name="Fred", mynumbers=x, mymatrix=m, age=5.3)
str(w)
list1 <- w
list2 <- list(name="Mel",mydf=planets_df)
my_list <- c(list1,list2)
str(my_list)
my_list[[2]] # 2nd component of the list
my_list[["mynumbers"]]
find_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
{
avg <- mean(x)
med <- median(x)
mode_val <- find_mode(x)
result <- list(mean=avg,median=med, mode=mode_val)
return(result)
}
avg <- mean(x)
med <- median(x)
mode_val <- find_mode(x)
result <- list(mean=avg,median=med, mode=mode_val)
return(result)
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
avg <- mean(x)
med <- median(x)
mode_val <- find_mode(x)
result <- list(mean=avg,median=med, mode=mode_val)
return(result)
x <- c(2,1,2,3,1,2,3,4,5)
stats_x <- calc_stats(x)
print(stats_x)
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
avg <- mean(x)
med <- median(x)
mode_val <- find_mode(x)
result <- list(mean=avg,median=med, mode=mode_val)
return(result)
avg <- mean(x)
med <- median(x)
mode_val <- find_mode(x)
result <- list(mean=avg,median=med, mode=mode_val)
return(result)
return(result)
result <- list(mean=avg,median=med, mode=mode_val)
x <- c(2,1,2,3,1,2,3,4,5)
stats_x <- calc_stats(x)
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
calc_stats <- function(x) {
avg <- mean(x)
med <- median(x)
mode_val <- find_mode(x)
result <- list(mean=avg,median=med, mode=mode_val)
return(result)
}
# Invoking the function
x <- c(2,1,2,3,1,2,3,4,5)
stats_x <- calc_stats(x)
print(stats_x)
subset(planets_df, select = c(name,type))
subset(planets_df, subset=diameter<1)
set1 <- subset(CO2, grepl("^Qn", Plant))
set2 <- sqldf("select * from CO2 where Plant like 'Qn%'")
all.equal(as.data.frame(set1),set2)
## Data manipulations
```{r manip}
#Create a subset of data based on columns
subset(planets_df, select = c(name,type))
# Select planets with diameter < 1
subset(planets_df, subset=diameter<1)
set1 <- subset(CO2, grepl("^Qn", Plant))
set2 <- sqldf("select * from CO2 where Plant like 'Qn%'")
all.equal(as.data.frame(set1),set2)
